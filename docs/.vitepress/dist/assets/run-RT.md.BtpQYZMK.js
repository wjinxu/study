import{_ as e,c as t,o as n,j as i,ae as l,a as p,t as h}from"./chunks/framework.BQcVUm0h.js";const F=JSON.parse('{"title":"single-cycle处理器启动RT","description":"","frontmatter":{"title":"single-cycle处理器启动RT","editLink":true,"layout":"doc"},"headers":[],"relativePath":"run-RT.md","filePath":"run-RT.md"}'),d={name:"run-RT.md"},k={id:"frontmatter-title",tabindex:"-1"};function c(a,s,r,o,E,g){return n(),t("div",null,[i("h1",k,[p(h(a.$frontmatter.title)+" ",1),s[0]||(s[0]=i("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),s[1]||(s[1]=l(`<h2 id="一、参考设计处理器启动rt" tabindex="-1">一、参考设计处理器启动RT <a class="header-anchor" href="#一、参考设计处理器启动rt" aria-label="Permalink to &quot;一、参考设计处理器启动RT&quot;">​</a></h2><ol><li>克隆<code>RT</code>项目</li></ol><p>执行下面的命令，克隆<code>RT</code>项目</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:cs-prj-repo/rt-thread-am.git</span></span></code></pre></div><ol start="2"><li>尝试启动<code>RT</code></li></ol><p>执行下面的命令，尝试启动<code>RT</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd xxx/rt-thread-am/bsp/abstract-machine</span></span>
<span class="line"><span>make clean</span></span>
<span class="line"><span>make init</span></span>
<span class="line"><span>make run ARCH=riscv32-npc</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意事项</p><ol><li><p>在启动RT的过程中需要<code>关闭波形</code>, <code>关闭指令追踪</code>, <code>关闭Difftest</code><br>关闭指令追踪可以注释掉<code>sim.c</code>的<code>IFDEF(CONFIG_ITRACE, instr_trace(cur_pc));</code>这行代码 <br>关闭Difftest可以注释掉<code>sim.c</code>的<code>IFDEF(CONFIG_DIFFTEST, difftest_step(cur_pc, cur_pc + 4));</code>这行代码</p></li><li><p>每次启动<code>RT</code>都要完整的执行以上的命令，即每次启动<code>RT</code>都需要重新<code>make clean</code>, <code>make init</code>一次.</p></li></ol></div><h2 id="二、完善你的单周期处理器" tabindex="-1">二、完善你的单周期处理器 <a class="header-anchor" href="#二、完善你的单周期处理器" aria-label="Permalink to &quot;二、完善你的单周期处理器&quot;">​</a></h2><p>如果你想要让你的单周期处理器启动<code>RT</code>，那么你的处理器需要实现<code>mret</code>, <code>ecall</code>, <code>csrrw</code>, <code>csrrs</code>这四条指令，并且支持读写<code>mstatus</code>, <code>mtvec</code>, <code>mcause</code>, <code>mepc</code>这四个CSR寄存器。</p><p>以下是指令的实现方式: <br>如果是<code>ecall</code>指令， 那么它指令效果需要是<code>mepc &lt;= pc + 4</code>并且<code>mcause &lt;= 32&#39;d1</code></p><p>以下是CSR寄存器的实现方式:</p><div class="language-verilog vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">reg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] mstatus;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">reg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] mtvec;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">reg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] mepc;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">reg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] mcause;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">always</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">posedge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clk) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">begin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rst) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">begin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //CSR寄存器的初始值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		mtvec   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32&#39;d0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		mstatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32&#39;h1800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		mepc    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32&#39;d0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		mcause  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32&#39;d0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> begin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //other code,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">小提示: 读写CSR寄存器时的<code>csr_id</code></p><p><br>读写<code>mstatus</code>寄存器的<code>csr_id=300</code><br>读写<code>mtvec</code>寄存器的<code>csr_id=305</code><br>读写<code>mepc</code>寄存器的<code>csr_id=341</code><br>读写<code>mcause</code>寄存器的<code>csr_id=342</code></p></div><h2 id="三、使用你自己的处理器启动rt" tabindex="-1">三、使用你自己的处理器启动<code>RT</code> <a class="header-anchor" href="#三、使用你自己的处理器启动rt" aria-label="Permalink to &quot;三、使用你自己的处理器启动\`RT\`&quot;">​</a></h2>`,15))])}const m=e(d,[["render",c]]);export{F as __pageData,m as default};
